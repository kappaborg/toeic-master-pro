/**
 * Language Manager - Multilingual Support System
 * Supports English and Simplified Chinese with instant switching
 */

class LanguageManager {
    constructor() {
        this.currentLanguage = 'en';
        this.supportedLanguages = ['en', 'zh-CN'];
        this.translations = {
            en: {
                // Navigation
                'nav.home': 'Home',
                'nav.progress': 'Progress',
                'nav.settings': 'Settings',
                'nav.analytics': 'Analytics',
                
                // Welcome Screen
                'welcome.title': 'Master English',
                'welcome.subtitle': 'Vocabulary',
                'welcome.description': 'Professional ESL learning platform with 10 interactive game modes and 731+ vocabulary words across all levels',
                'welcome.startLearning': 'Start Learning Journey',
                'welcome.viewAnalytics': 'View Analytics',
                
                // Hero Carousel
                'hero.smartLearning.title': 'Smart Learning',
                'hero.smartLearning.description': 'AI-powered adaptive learning system that adjusts to your level and learning pace',
                'hero.smartLearning.highlight': 'Personalized Experience',
                'hero.smartLearning.action': 'Start Learning',
                
                'hero.realConversations.title': 'Real Conversations',
                'hero.realConversations.description': 'Practice real-world conversations and dialogues in various everyday scenarios',
                'hero.realConversations.highlight': 'Practical Skills',
                'hero.realConversations.action': 'Begin Practice',
                
                'hero.memoryScience.title': 'Memory Science',
                'hero.memoryScience.description': 'Advanced spaced repetition algorithm for optimal vocabulary retention',
                'hero.memoryScience.highlight': 'Scientific Approach',
                'hero.memoryScience.action': 'Learn More',
                
                'hero.gamifiedLearning.title': 'Gamified Learning',
                'hero.gamifiedLearning.description': 'Earn XP, unlock achievements, and compete on leaderboards while learning',
                'hero.gamifiedLearning.highlight': 'Fun & Engaging',
                'hero.gamifiedLearning.action': 'Play Now',
                
                'hero.progressAnalytics.title': 'Progress Analytics',
                'hero.progressAnalytics.description': 'Track your learning journey with detailed insights and performance metrics',
                'hero.progressAnalytics.highlight': 'Data-Driven',
                'hero.progressAnalytics.action': 'View Progress',
                
                'hero.globalCommunity.title': 'Global Community',
                'hero.globalCommunity.description': 'Connect with learners worldwide and share your achievements',
                'hero.globalCommunity.highlight': 'Social Learning',
                'hero.globalCommunity.action': 'Join Community',
                
                // Game Modes
                'game.multipleChoice': 'Multiple Choice',
                'game.conversation': 'Conversation',
                'game.modalVerbs': 'Modal Verbs',
                'game.timeTelling': 'Time Practice',
                'game.categorySort': 'Category Sort',
                'game.visualLearning': 'Visual Learning',
                'game.conversationBuilder': 'Conversation Builder',
                'game.prefixSuffix': 'Prefix & Suffix',
                'game.readingComprehension': 'Reading Comprehension',
                'game.vocabularyLearning': 'Vocabulary Learning',
                
                // Global Controls
                'control.progress': 'Toggle Progress Panel (Drag to move)',
                'control.home': 'Go to Home (Drag to move)',
                
                // Language Switcher
                'language.english': 'English',
                'language.chinese': '‰∏≠Êñá',
                'language.switch': 'Switch Language'
            },
            'zh-CN': {
                // Navigation
                'nav.home': 'È¶ñÈ°µ',
                'nav.progress': 'ËøõÂ∫¶',
                'nav.settings': 'ËÆæÁΩÆ',
                'nav.analytics': 'ÂàÜÊûê',
                
                // Welcome Screen
                'welcome.title': 'ÊéåÊè°Ëã±ËØ≠',
                'welcome.subtitle': 'ËØçÊ±á',
                'welcome.description': '‰∏ì‰∏öÁöÑESLÂ≠¶‰π†Âπ≥Âè∞ÔºåÂåÖÂê´10Áßç‰∫íÂä®Ê∏∏ÊàèÊ®°ÂºèÂíå731+‰∏™ËØçÊ±áÔºåÊ∂µÁõñÊâÄÊúâÁ∫ßÂà´',
                'welcome.startLearning': 'ÂºÄÂßãÂ≠¶‰π†‰πãÊóÖ',
                'welcome.viewAnalytics': 'Êü•ÁúãÂàÜÊûê',
                
                // Hero Carousel
                'hero.smartLearning.title': 'Êô∫ËÉΩÂ≠¶‰π†',
                'hero.smartLearning.description': 'AIÈ©±Âä®ÁöÑËá™ÈÄÇÂ∫îÂ≠¶‰π†Á≥ªÁªüÔºåÊ†πÊçÆÊÇ®ÁöÑÊ∞¥Âπ≥ÂíåÂ≠¶‰π†ËäÇÂ•èËøõË°åË∞ÉÊï¥',
                'hero.smartLearning.highlight': '‰∏™ÊÄßÂåñ‰ΩìÈ™å',
                'hero.smartLearning.action': 'ÂºÄÂßãÂ≠¶‰π†',
                
                'hero.realConversations.title': 'ÁúüÂÆûÂØπËØù',
                'hero.realConversations.description': 'Âú®ÂêÑÁßçÊó•Â∏∏Âú∫ÊôØ‰∏≠ÁªÉ‰π†ÁúüÂÆû‰∏ñÁïåÁöÑÂØπËØùÂíåÂØπËØù',
                'hero.realConversations.highlight': 'ÂÆûÁî®ÊäÄËÉΩ',
                'hero.realConversations.action': 'ÂºÄÂßãÁªÉ‰π†',
                
                'hero.memoryScience.title': 'ËÆ∞ÂøÜÁßëÂ≠¶',
                'hero.memoryScience.description': 'ÂÖàËøõÁöÑÈó¥ÈöîÈáçÂ§çÁÆóÊ≥ïÔºåÂÆûÁé∞ÊúÄ‰Ω≥ËØçÊ±áËÆ∞ÂøÜ',
                'hero.memoryScience.highlight': 'ÁßëÂ≠¶ÊñπÊ≥ï',
                'hero.memoryScience.action': '‰∫ÜËß£Êõ¥Â§ö',
                
                'hero.gamifiedLearning.title': 'Ê∏∏ÊàèÂåñÂ≠¶‰π†',
                'hero.gamifiedLearning.description': 'Âú®Â≠¶‰π†ËøáÁ®ã‰∏≠Ëé∑ÂæóXP„ÄÅËß£ÈîÅÊàêÂ∞±Âπ∂Âú®ÊéíË°åÊ¶ú‰∏äÁ´û‰∫â',
                'hero.gamifiedLearning.highlight': 'ÊúâË∂£‰∏îÂºï‰∫∫ÂÖ•ËÉú',
                'hero.gamifiedLearning.action': 'Á´ãÂç≥Ê∏∏Êàè',
                
                'hero.progressAnalytics.title': 'ËøõÂ∫¶ÂàÜÊûê',
                'hero.progressAnalytics.description': 'ÈÄöËøáËØ¶ÁªÜÁöÑÊ¥ûÂØüÂíåÊÄßËÉΩÊåáÊ†áË∑üË∏™ÊÇ®ÁöÑÂ≠¶‰π†‰πãÊóÖ',
                'hero.progressAnalytics.highlight': 'Êï∞ÊçÆÈ©±Âä®',
                'hero.progressAnalytics.action': 'Êü•ÁúãËøõÂ∫¶',
                
                'hero.globalCommunity.title': 'ÂÖ®ÁêÉÁ§æÂå∫',
                'hero.globalCommunity.description': '‰∏é‰∏ñÁïåÂêÑÂú∞ÁöÑÂ≠¶‰π†ËÄÖËÅîÁ≥ªÂπ∂ÂàÜ‰∫´ÊÇ®ÁöÑÊàêÂ∞±',
                'hero.globalCommunity.highlight': 'Á§æ‰∫§Â≠¶‰π†',
                'hero.globalCommunity.action': 'Âä†ÂÖ•Á§æÂå∫',
                
                // Game Modes
                'game.multipleChoice': 'ÈÄâÊã©È¢ò',
                'game.conversation': 'ÂØπËØù',
                'game.modalVerbs': 'ÊÉÖÊÄÅÂä®ËØç',
                'game.timeTelling': 'Êó∂Èó¥ÁªÉ‰π†',
                'game.categorySort': 'ÂàÜÁ±ªÊéíÂ∫è',
                'game.visualLearning': 'ËßÜËßâÂ≠¶‰π†',
                'game.conversationBuilder': 'ÂØπËØùÊûÑÂª∫',
                'game.prefixSuffix': 'ÂâçÁºÄÂíåÂêéÁºÄ',
                'game.readingComprehension': 'ÈòÖËØªÁêÜËß£',
                'game.vocabularyLearning': 'ËØçÊ±áÂ≠¶‰π†',
                
                // Global Controls
                'control.progress': 'ÂàáÊç¢ËøõÂ∫¶Èù¢ÊùøÔºàÊãñÊãΩÁßªÂä®Ôºâ',
                'control.home': 'ËøîÂõûÈ¶ñÈ°µÔºàÊãñÊãΩÁßªÂä®Ôºâ',
                
                // Language Switcher
                'language.english': 'English',
                'language.chinese': '‰∏≠Êñá',
                'language.switch': 'ÂàáÊç¢ËØ≠Ë®Ä'
            }
        };
        
        this.initialize();
        console.log('üåç Language Manager initialized');
    }
    
    initialize() {
        // Load saved language preference
        const savedLanguage = localStorage.getItem('preferredLanguage');
        if (savedLanguage && this.supportedLanguages.includes(savedLanguage)) {
            this.currentLanguage = savedLanguage;
        }
        
        // Create language switcher
        this.createLanguageSwitcher();
        
        // Apply current language
        this.applyLanguage(this.currentLanguage);
    }
    
    createLanguageSwitcher() {
        // Update navbar language toggle only
        this.updateNavbarLanguageToggle();
        console.log('üåç Navbar language toggle updated');
    }
    
    updateNavbarLanguageToggle() {
        const navbarToggle = document.getElementById('navbarLanguageToggle');
        if (navbarToggle) {
            const languageText = navbarToggle.querySelector('.language-text');
            if (languageText) {
                languageText.textContent = this.currentLanguage === 'en' ? 'EN' : '‰∏≠';
            }
            
            // Add click event if not already added
            if (!navbarToggle.hasAttribute('data-language-bound')) {
                navbarToggle.setAttribute('data-language-bound', 'true');
                navbarToggle.addEventListener('click', () => this.toggleLanguage());
            }
        }
        
        // Update mobile language text
        const mobileLanguageText = document.querySelector('.mobile-language-text');
        if (mobileLanguageText) {
            mobileLanguageText.textContent = this.currentLanguage === 'en' ? 'Switch to ‰∏≠Êñá' : 'Switch to English';
        }
    }
    
    toggleLanguage() {
        const newLanguage = this.currentLanguage === 'en' ? 'zh-CN' : 'en';
        this.switchLanguage(newLanguage);
    }
    
    switchLanguage(language) {
        if (!this.supportedLanguages.includes(language)) {
            console.error(`‚ùå Unsupported language: ${language}`);
            return;
        }
        
        console.log(`üåç Switching language from ${this.currentLanguage} to ${language}`);
        
        this.currentLanguage = language;
        localStorage.setItem('preferredLanguage', language);
        
        // Apply new language
        this.applyLanguage(language);
        
        // Update language switcher
        this.createLanguageSwitcher();
        
        // Trigger language change event
        window.dispatchEvent(new CustomEvent('languageChanged', { detail: { language } }));
    }
    
    applyLanguage(language) {
        const translations = this.translations[language];
        if (!translations) {
            console.error(`‚ùå Translations not found for language: ${language}`);
            return;
        }
        
        // Update all translatable elements
        Object.keys(translations).forEach(key => {
            const elements = document.querySelectorAll(`[data-i18n="${key}"]`);
            elements.forEach(element => {
                element.textContent = translations[key];
            });
        });
        
        // Update specific elements by ID or class
        this.updateSpecificElements(language);
        
        console.log(`‚úÖ Language applied: ${language}`);
    }
    
    updateSpecificElements(language) {
        const translations = this.translations[language];
        
        // Update welcome screen
        const welcomeTitle = document.querySelector('.heading-1');
        if (welcomeTitle) {
            welcomeTitle.innerHTML = `
                ${translations['welcome.title']}
                <br>
                <span class="text-transparent bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text">${translations['welcome.subtitle']}</span>
            `;
        }
        
        const welcomeDesc = document.querySelector('.text-xl.text-white\\/90');
        if (welcomeDesc) {
            welcomeDesc.textContent = translations['welcome.description'];
        }
        
        // Update action buttons
        const startLearningBtn = document.querySelector('button[onclick="startLearning()"]');
        if (startLearningBtn) {
            startLearningBtn.innerHTML = `
                <i data-lucide="play" class="w-5 h-5 mr-2 group-hover:scale-110 transition-transform" aria-hidden="true"></i>
                ${translations['welcome.startLearning']}
            `;
        }
        
        const viewAnalyticsBtn = document.querySelector('button[onclick="showAnalytics()"]');
        if (viewAnalyticsBtn) {
            viewAnalyticsBtn.innerHTML = `
                <i data-lucide="bar-chart-3" class="w-5 h-5 mr-2 group-hover:scale-110 transition-transform" aria-hidden="true"></i>
                ${translations['welcome.viewAnalytics']}
            `;
        }
        
        // Update navigation
        const navHome = document.querySelector('a[href="#home"]');
        if (navHome) {
            navHome.textContent = translations['nav.home'];
        }
        
        const navProgress = document.querySelector('a[href="#progress"]');
        if (navProgress) {
            navProgress.textContent = translations['nav.progress'];
        }
        
        const navSettings = document.querySelector('a[href="#settings"]');
        if (navSettings) {
            navSettings.textContent = translations['nav.settings'];
        }
        
        const navAnalytics = document.querySelector('a[href="#analytics"]');
        if (navAnalytics) {
            navAnalytics.textContent = translations['nav.analytics'];
        }
    }
    
    getText(key) {
        const translations = this.translations[this.currentLanguage];
        return translations[key] || key;
    }
    
    getCurrentLanguage() {
        return this.currentLanguage;
    }
    
    isEnglish() {
        return this.currentLanguage === 'en';
    }
    
    isChinese() {
        return this.currentLanguage === 'zh-CN';
    }
}

// Initialize language manager
window.LanguageManager = LanguageManager;
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.languageManager = new LanguageManager();
    });
} else {
    window.languageManager = new LanguageManager();
}

        console.log('üåç Language Manager system loaded');
        
        // Add global mobile toggle function
        window.toggleLanguageFromMobile = () => {
            if (window.languageManager) {
                window.languageManager.toggleLanguage();
            }
        };
